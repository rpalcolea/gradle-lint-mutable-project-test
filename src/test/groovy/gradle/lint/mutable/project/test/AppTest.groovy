/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package gradle.lint.mutable.project.test

import nebula.test.IntegrationSpec


class AppTest extends IntegrationSpec {
    def 'assemble'() {
        when:
        buildFile.text = """

            buildscript {
                repositories {
                      maven {
                          url "https://plugins.gradle.org/m2/"
                        }
                      }
                dependencies {
                    classpath "com.netflix.nebula:nebula-release-plugin:9.2.0"
                    classpath 'io.franzbecker:gradle-lombok:1.14'
                    classpath "com.netflix.nebula:gradle-lint-plugin:10.4.1"
                 }
            }
            
            apply plugin: 'nebula.lint'

            allprojects {
                apply plugin: 'nebula.lint'
                apply plugin: 'nebula.release'
                apply plugin: 'checkstyle'
                apply plugin: 'jacoco'
                apply plugin: 'io.franzbecker.gradle-lombok'
            }
                        
        """

        addSubproject('sub1', """
            apply plugin: 'java-library'
            
            dependencies {
                testImplementation 'com.fasterxml.jackson.core:jackson-databind'
                testImplementation 'org.assertj:assertj-core'
                testImplementation 'org.apache.logging.log4j:log4j-jul:2.+'
                testImplementation 'org.apache.logging.log4j:log4j-core:2.+'
                testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.+'
                testImplementation 'org.junit.jupiter:junit-jupiter-api'
                testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
            }

        """)

        addSubproject('sub2', """
            apply plugin: 'java-library'

            
            dependencies {
                    api project(':sub1')
                    api 'com.squareup.retrofit2:retrofit:latest.release'
                    api 'com.squareup.okhttp3:okhttp:latest.release'
                    api 'javax.inject:javax.inject:latest.release'
                    
                    implementation 'com.squareup.okhttp3:logging-interceptor:3.+'
                    implementation 'org.apache.logging.log4j:log4j-api'
                
                    testImplementation 'com.squareup.okhttp3:mockwebserver:3.+'
                    testImplementation 'com.squareup.retrofit2:converter-jackson:2.+'
                    testImplementation 'org.assertj:assertj-core:3.+'
                    testImplementation 'com.google.guava:guava:25.+'
                    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.+'
                    testImplementation 'org.apache.logging.log4j:log4j-jul:2.+'
                    testImplementation 'org.apache.logging.log4j:log4j-core:2.+'
                    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.+'
                    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.+'
            }

        """)

        addSubproject('sub3', """
            apply plugin: 'java'
            
            configurations.all {
                resolutionStrategy {
                    force 'org.yaml:snakeyaml:1.19'
                }
            }

            
            dependencies {
                compile project(':sub1')
                compile 'com.github.zafarkhaja:java-semver:0.+'
                compile 'com.squareup.okhttp3:logging-interceptor:latest.release'
                compile 'com.squareup.retrofit2:converter-jackson:2.2.0'
                compile 'org.atteo:evo-inflector:latest.release'
                compile 'com.google.guava:guava:latest.release'
                compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:latest.release'
                compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:latest.release'
                compile 'com.fasterxml.jackson.module:jackson-module-kotlin:latest.release'
                compile 'io.springfox:springfox-swagger2:2.+'
                compile 'io.springfox:springfox-swagger-ui:2.+'
            }

        """)

        then:
        def results = runTasksSuccessfully('assemble', '-PgradleLint.alwaysRun=true')
        !results.standardError
        !results.standardOutput.contains("was resolved without accessing the project in a safe manner")


    }
}
